#include<iostream>
using namespace std;
class Heap
{
int n;
int *minheap,*maxheap;
public:
void get();
void displayMin(){cout<<"Minimum marks are :"<<minheap[0]<<endl;}
void displayMax(){cout<<"Maximum marks are :"<<maxheap[0]<<endl;}
void upAdjust(bool,int);
};
void Heap::get()
{
cout<<"Enter number of students."<<endl;
cin>>n;
int k;
minheap=new int[n];
maxheap=new int[n];
cout<<"Enter marks of students."<<endl;
for(int i=0;i<n;i++)
{
cin>>k;
minheap[i]=k;
upAdjust(0,i);
maxheap[i]=k;
upAdjust(1,i);
}
}
void Heap::upAdjust(bool m,int l)
{
int s;
if(!m)
{
while(minheap[(l-1)/2]<minheap[l])
{
s=minheap[l];
minheap[l]=minheap[(l-1)/2];
minheap[(l-1)/2]=s;
l=(l-1)/2;
if(l==-1)
break;
}
}
else
{
while(maxheap[(l-1)/2]>maxheap[l])
{
s=maxheap[l];
maxheap[l]=maxheap[(l-1)/2];
maxheap[(l-1)/2]=s;
l=(l-1)/2;
if(l==-1)
break;
}
}
}
main()
{
Heap H;
H.get();
H.displayMin();
H.displayMax();
return(0);
}










------------------------------------------------

5-------

#include<iostream>
using namespace std;

class node {
     public:
      int data;
      node *left;
      node *right;
};

class bst {
public:
node *root;
bst() {
root=NULL; 
}
void create();
void insert();
void postorder(node*);
void inorder(node *);
      void preorder(node *);
      void search(int key);
void minimum();
int height(node*);
};

void bst::minimum() {
     node *temp;
int min;
     temp=root;
while(temp->left!=NULL) {
min=temp->data;
temp=temp->left;
if(temp->data<min) {
min=temp->data;
}
else {
temp=temp->left; 
}
}
cout<<"minimum no. is:"<<min;
}

int bst::height(node *root) {
if(root==NULL) {
return 0;
}
else {
if(height(root->right)>height(root->left)) {
return (1+height(root->right));
}
else {
return (1+height(root->left));
}
}
} 

void bst::create() {
node *curr,*temp;
int ans=1;
cout<<"enter data:";
do {
curr=new node;
cin>>curr->data;
curr->left=curr->right=NULL;
if(root==NULL) {
root=curr;
}
else {
temp=root;
while(1) {
if(curr->data<=temp->data) {
if(temp->left==NULL) {
temp->left=curr;
break;
}
else {
temp=temp->left;
}
}
else {
if(temp->right==NULL) {
temp->right=curr;
break;
}
else {
temp=temp->right;
}
}
}
}
cout<<"want to continue:";
cin>>ans;
}while(ans==1);
}

void bst::inorder(node *root) {
if(root!=NULL) {
inorder(root->left);
cout<<" "<<root->data;
inorder(root->right);
}
}

void bst::preorder(node *root) {
if(root!=NULL) {
cout<<"  "<<root->data;
preorder(root->left);
preorder(root->right);
}
}

void bst::postorder(node *root) {
if(root!=NULL) {
postorder(root->left);
postorder(root->right);
cout<<" "<<root->data;
}
}

void bst::insert() {
node *curr,*temp;
int ans=1;
cout<<"enter data:";
curr=new node;
cin>>curr->data;
curr->left=curr->right=NULL;
if(root==NULL) {
root=curr;
}
else {
temp=root;
while(1) {
if(curr->data<=temp->data) {
if(temp->left==NULL) {
temp->left=curr;
break;
}
else {
temp=temp->left;
}
}
else {
if(temp->right==NULL) {
temp->right=curr;
break;
}
else {
temp=temp->right;
}
}
}
}

}

void bst::search(int key) {
node *curr;
curr=root;
while(curr!=NULL) {
if(curr->data==key) {
cout<<"found";
break;
}
else {
if(key<curr->data) {
curr=curr->left;
}
else {
curr=curr->right;
}
}
}
if(curr==NULL) {
cout<<"not found";
}
}

int main() {
bst b;
int key,ch;
do {
cout<<"\n1.create\n2.insert\n3.inorder\n4.preorder\n5.postorder\n6.search\n7.minimum\n8.height\npress 0 to exit\n";
cout<<"enter your choice:";
cin>>ch;
switch(ch) {
case 1:
b.create();
break;
case 2:
b.insert();
break;
case 3:
cout<<"inorder traversal is\n";
b.inorder(b.root); 
break;
case 4:
cout<<"preorder traversal is\n";
b.preorder(b.root);
break;
case 5:
cout<<"postorder traversal is\n";
b.postorder(b.root);
break;
case 6:
cout<<"\nenter key:";
cin>>key;
b.search(key);
break;
case 7:
b.minimum();
break;
case 8:
cout<<"height of tree: "<<b.height(b.root);
break;
}
}while(ch!=0);
return 0;
}

